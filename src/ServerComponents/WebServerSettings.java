/*Zadanie BVI
 * 
 * Vytvorte aplikaciu jednoducheho web servera, ktory bude poskytovat'
 * staticky web obsah s moznost'ou zabezpecenia pomocou mena a hesla
 * resp. podla IP.
 * 
 * Matúš Husovský
 *
 * 
 */

package ServerComponents;

import java.util.regex.Pattern;
import java.io.IOException;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;


/**
 *
 * @author Matus
 */
public class WebServerSettings extends javax.swing.JFrame {

    private WebServer webserver;
    private int port = 8000; //default
    private String pathToHtmlDir;
    private String login,password;
    private Boolean passwordAuthentication;
    private Boolean ipVerification;
    private Boolean isWhiteList;
    private final String  ipAddressesPattern = "\\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(/[8,9]|/1[0-9]|/2[0-9]|/3[0-2])?\\b";
    String portsPattern = "\\b[0-9]{0,5}(;[0-9]{0,5})*\\b"; 
   
    private DefaultListModel listModel;
    private Vector<String> WhiteListVector;
    private Vector<String> BlackListVector;
    private Vector<String> ipList;


    public WebServerSettings() {
        this.login="";
        this.password="";
        this.passwordAuthentication=false;
        this.ipVerification=false;
        this.isWhiteList=true;
        this.listModel = new DefaultListModel();
        this.WhiteListVector = new Vector<>();
        this.BlackListVector = new Vector<>();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        webServerContent = new javax.swing.JButton();
        jTextField5 = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        basicLoginPassAuthStatus = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        passwordTextField = new javax.swing.JPasswordField();
        loginTextFiled = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        blackWhiteListChooser = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        ipVerStatusLabel = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel12 = new javax.swing.JLabel();
        serverStatusLabel = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        currentServerContentLabel = new javax.swing.JLabel();
        currentServerPortLabel = new javax.swing.JLabel();
        currentBasicAuthStatusLabel = new javax.swing.JLabel();
        stopServerButton = new javax.swing.JButton();
        startServerButton = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();
        jSeparator4 = new javax.swing.JSeparator();
        jScrollPane4 = new javax.swing.JScrollPane();
        ipAddressesList = new javax.swing.JList(listModel);
        addIPaddressInList = new javax.swing.JButton();
        textFieldForInsertingIPAddress = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        ipAddressesDeleteButton = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        currentIPVerificationStatusLabel = new javax.swing.JLabel();
        ipVerControlButton = new javax.swing.JButton();
        basicAuthControlButton = new javax.swing.JButton();
        showSecuritySettingsInLog = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Web Server Settings");
        setAutoRequestFocus(false);
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setName("Web Server Settings");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 255));
        jLabel1.setText("Main Web Server Settings");

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Web Content:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Port:");

        webServerContent.setText("Select Directory");
        webServerContent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                webServerContentActionPerformed(evt);
            }
        });

        jLabel14.setForeground(new java.awt.Color(0, 102, 255));
        jLabel14.setText("default:8000");

        basicLoginPassAuthStatus.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        basicLoginPassAuthStatus.setText("Disabled");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("Status:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Password:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Login:");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setText("IPv4 Address Filter");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 51, 255));
        jLabel4.setText("Basic Authentication");

        blackWhiteListChooser.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "White list", "Black list" }));
        blackWhiteListChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blackWhiteListChooserActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setText("Status:");

        ipVerStatusLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        ipVerStatusLabel.setText("Disabled");
        ipVerStatusLabel.setToolTipText("");

        jSeparator3.setBackground(new java.awt.Color(51, 51, 255));
        jSeparator3.setForeground(new java.awt.Color(51, 51, 255));

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setText("Server Status:");

        serverStatusLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        serverStatusLabel.setForeground(new java.awt.Color(255, 51, 51));
        serverStatusLabel.setText("Stopped ");

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel16.setText("Content:");

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel17.setText("Port:");

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel18.setText("Basic Authentication:");

        currentServerContentLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        currentServerContentLabel.setForeground(new java.awt.Color(0, 51, 255));

        currentServerPortLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        currentServerPortLabel.setForeground(new java.awt.Color(0, 51, 255));

        currentBasicAuthStatusLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        currentBasicAuthStatusLabel.setForeground(new java.awt.Color(0, 51, 255));

        stopServerButton.setText("Stop Server");
        stopServerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopServerButtonActionPerformed(evt);
            }
        });

        startServerButton.setText("Start Server");
        startServerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startServerButtonActionPerformed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel15.setText("Server Log");

        logTextArea.setBackground(new java.awt.Color(0, 204, 204));
        logTextArea.setColumns(20);
        logTextArea.setFont(new java.awt.Font("Monospaced", 1, 13)); // NOI18N
        logTextArea.setRows(5);
        jScrollPane1.setViewportView(logTextArea);

        jSeparator4.setBackground(new java.awt.Color(51, 51, 255));
        jSeparator4.setForeground(new java.awt.Color(51, 51, 255));

        ipAddressesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane4.setViewportView(ipAddressesList);

        addIPaddressInList.setText("ADD");
        addIPaddressInList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addIPaddressInListActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel13.setText("IP Adresss or subnet");

        ipAddressesDeleteButton.setText("DELETE");
        ipAddressesDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ipAddressesDeleteButtonActionPerformed(evt);
            }
        });

        jLabel23.setText("192.168.0.1/24");

        jLabel24.setText("Exapmle:");

        jLabel25.setText("192.168.0.1");

        jLabel26.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel26.setText("IP Verification:");

        currentIPVerificationStatusLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        currentIPVerificationStatusLabel.setForeground(new java.awt.Color(0, 51, 255));

        ipVerControlButton.setLabel("Turn On");
        ipVerControlButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ipVerControlButtonActionPerformed(evt);
            }
        });

        basicAuthControlButton.setText("Enable");
        basicAuthControlButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                basicAuthControlButtonActionPerformed(evt);
            }
        });

        showSecuritySettingsInLog.setText("Show Current Security Settings in Log");
        showSecuritySettingsInLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showSecuritySettingsInLogActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(currentServerContentLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel17)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(currentServerPortLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel18)
                                            .addComponent(jLabel26))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(currentBasicAuthStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(currentIPVerificationStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel9)
                                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(blackWhiteListChooser, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(ipVerControlButton)
                                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                                        .addComponent(jLabel10)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(ipVerStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addGap(46, 46, 46)
                                                .addComponent(ipAddressesDeleteButton))
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(addIPaddressInList)
                                            .addComponent(textFieldForInsertingIPAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel13)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(jLabel24)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel23)
                                                    .addComponent(jLabel25)))))
                                    .addComponent(jLabel4)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel6))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(passwordTextField)
                                            .addComponent(loginTextFiled, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(49, 49, 49)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(jLabel7)
                                                .addGap(18, 18, 18)
                                                .addComponent(basicLoginPassAuthStatus))
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addComponent(basicAuthControlButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel12)
                                        .addGap(18, 18, 18)
                                        .addComponent(serverStatusLabel)
                                        .addGap(40, 40, 40)
                                        .addComponent(startServerButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(stopServerButton))
                                    .addComponent(jLabel16))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel15)
                        .addGap(30, 30, 30)
                        .addComponent(showSecuritySettingsInLog, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(loginTextFiled, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(basicLoginPassAuthStatus)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(passwordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(basicAuthControlButton))
                .addGap(32, 32, 32)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(18, 18, 18)
                                .addComponent(blackWhiteListChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(ipVerControlButton))
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ipAddressesDeleteButton)
                            .addComponent(ipVerStatusLabel)
                            .addComponent(jLabel10)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel13)
                        .addGap(12, 12, 12)
                        .addComponent(textFieldForInsertingIPAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17)
                        .addComponent(addIPaddressInList)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel24)
                            .addComponent(jLabel25))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel23)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(serverStatusLabel)
                            .addComponent(startServerButton)
                            .addComponent(stopServerButton))
                        .addGap(4, 4, 4)
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(currentServerContentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(3, 3, 3)
                                        .addComponent(currentBasicAuthStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel18))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(currentIPVerificationStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel26, javax.swing.GroupLayout.Alignment.TRAILING)))
                            .addComponent(currentServerPortLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15)
                            .addComponent(showSecuritySettingsInLog)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        ipVerControlButton.getAccessibleContext().setAccessibleName("Turn On");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel14))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(webServerContent))))
                            .addComponent(jLabel1))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jLabel1)
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(webServerContent)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel14))
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        jScrollPane2.setViewportView(jPanel1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 745, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void blackWhiteListChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blackWhiteListChooserActionPerformed
        //White list
        if(blackWhiteListChooser.getSelectedIndex()==0){
                ipAddressesList.setListData(WhiteListVector);
                ipAddressesList.repaint();
        System.out.println("Index 0");}
        //Black list
        if(blackWhiteListChooser.getSelectedIndex()==1){
            ipAddressesList.setListData(BlackListVector);
            ipAddressesList.repaint();
        System.out.println("Index 1");}

    }//GEN-LAST:event_blackWhiteListChooserActionPerformed

    private void startServerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startServerButtonActionPerformed
        if(jTextField5.getText().trim().isEmpty())
        {
            JOptionPane.showMessageDialog(this, "You must select content for web server !","Message", JOptionPane.INFORMATION_MESSAGE);
        }
        
        else
        {
            if(!(jTextField2.getText().trim().isEmpty())){
                    try{
            int portFromField = Integer.parseInt(jTextField2.getText().trim());
            if(portFromField<0||portFromField>65535)
            {
                
                JOptionPane.showMessageDialog(this, "Port range is from 0 to 65535 !","Error", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            port = portFromField;
        }
        catch (Exception ex){
            JOptionPane.showMessageDialog(this, "Port is number !","Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
            }
            else
                port=8000;
            try {
                webserver = WebServer.getInstance(port,login,password,passwordAuthentication,logTextArea);
                if(!webserver.isRunning())
                    {
                    webserver.setContentPath(jTextField5.getText());
                    webserver.setAuhtData(login,password,passwordAuthentication,ipVerification,ipList,isWhiteList);
                    webserver.startServer(currentServerContentLabel,currentServerPortLabel,currentBasicAuthStatusLabel,currentIPVerificationStatusLabel);
                    }
                else
                    JOptionPane.showMessageDialog(this, "You must stop server for new settings !","Message", JOptionPane.INFORMATION_MESSAGE);
                serverStatusLabel.setText("Running");

            } catch (Exception ex) {
                Logger.getLogger(WebServerSettings.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        }
    }//GEN-LAST:event_startServerButtonActionPerformed

    private void stopServerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopServerButtonActionPerformed
                try {
            WebServer webserver = WebServer.getInstance(port,login,password,passwordAuthentication,logTextArea);
    
            if(webserver.isRunning())
                webserver.stopServer();
                currentServerContentLabel.setText("");
                currentBasicAuthStatusLabel.setText("");
                currentServerPortLabel.setText("");
                currentIPVerificationStatusLabel.setText("");
                serverStatusLabel.setText("Stopped");
            
        } catch (Exception ex) {
            Logger.getLogger(WebServerSettings.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_stopServerButtonActionPerformed

    private void webServerContentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_webServerContentActionPerformed

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Select Web Content Directory");
        fileChooser.setDialogType(JFileChooser.OPEN_DIALOG);
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                pathToHtmlDir = fileChooser.getSelectedFile().getCanonicalPath();
                System.out.println(pathToHtmlDir);
                this.jTextField5.setText(pathToHtmlDir);
                
            } catch (IOException ex) {
                Logger.getLogger(WebServerSettings.class.getName()).log(Level.SEVERE, null, ex);
            }
        }


    }//GEN-LAST:event_webServerContentActionPerformed

    private void ipAddressesDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ipAddressesDeleteButtonActionPerformed
        
        int index = ipAddressesList.getSelectedIndex();
        if(index!=-1){
        int size = 0;
                if(blackWhiteListChooser.getSelectedIndex()==0){
                    WhiteListVector.remove(index);
                    ipAddressesList.setListData(WhiteListVector);
                    ipAddressesList.repaint();
               }

                if(blackWhiteListChooser.getSelectedIndex()==1){
                    BlackListVector.remove(index);
                    ipAddressesList.setListData(BlackListVector);
                    ipAddressesList.repaint();
                }
        }
    

    
    }//GEN-LAST:event_ipAddressesDeleteButtonActionPerformed

    private void addIPaddressInListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addIPaddressInListActionPerformed
        if(!textFieldForInsertingIPAddress.getText().trim().isEmpty()){
            System.out.println(textFieldForInsertingIPAddress.getText().trim());
            if(!textFieldForInsertingIPAddress.getText().trim().matches(ipAddressesPattern)){
                         JOptionPane.showMessageDialog(this, "Bad IP Address or Subnet IP Address!","Bad data in field", JOptionPane.INFORMATION_MESSAGE);

            }
            else{
                
                /*
                int index = jList1.getSelectedIndex(); //get selected index
                if (index == -1) { //no selection, so insert at beginning
                    index = 0;
                } else {           //add after the selected item
                    index++;
                }

                listModel.insertElementAt(jTextField1.getText(), index);

                //Reset the text field.
                jTextField1.requestFocusInWindow();
                jTextField1.setText("");

                //Select the new item and make it visible.
                jList1.setSelectedIndex(index);
                jList1.ensureIndexIsVisible(index);
                * */
               if(blackWhiteListChooser.getSelectedIndex()==0){
                    WhiteListVector.add(textFieldForInsertingIPAddress.getText().trim());
                    ipAddressesList.setListData(WhiteListVector);
               }
                    //Black list
                if(blackWhiteListChooser.getSelectedIndex()==1){
                    BlackListVector.add(textFieldForInsertingIPAddress.getText().trim());
                    ipAddressesList.setListData(BlackListVector);
                }
                ipAddressesList.repaint();
            }
        }
    }//GEN-LAST:event_addIPaddressInListActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
       stopServerButtonActionPerformed(null);
       System.out.println("KILLING THE SERVER !\nClosing the program !");
    }//GEN-LAST:event_formWindowClosing

    private void ipVerControlButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ipVerControlButtonActionPerformed
         if(ipVerification==false){
                    if(blackWhiteListChooser.getSelectedIndex()==0){
                        if(WhiteListVector.isEmpty())
                            {
                                JOptionPane.showMessageDialog(this, "White list is empty, the same effect than stoped server !","List is empty !", JOptionPane.INFORMATION_MESSAGE);
                            }
                        else
                            {
                                this.ipVerification=true;
                                this.ipList=WhiteListVector;
                                this.ipVerControlButton.setText("Turn Off");
                                this.ipVerStatusLabel.setText("White List Enabled");
                                this.isWhiteList=true;
                            }

                }
                        //Black list
                    if(blackWhiteListChooser.getSelectedIndex()==1){
                            if(BlackListVector.isEmpty())
                            {
                                JOptionPane.showMessageDialog(this, "Black list is empty, this setting is redudant !","List is empty !", JOptionPane.INFORMATION_MESSAGE);
                            }
                            else
                            {
                                this.ipVerification=true;
                                this.ipList=BlackListVector;
                                this.ipVerControlButton.setText("Turn Off");
                                this.ipVerStatusLabel.setText("Black List Enabled");
                                this.isWhiteList=false;

                            }

                    }
         }
         else
         {              
                               
                                this.ipVerification=false;
                                this.ipVerControlButton.setText("Turn On");
                                this.ipVerStatusLabel.setText("Disabled");
                                this.ipVerControlButton.setSelected(false);
                                this.ipVerControlButton.repaint();
         }
    }//GEN-LAST:event_ipVerControlButtonActionPerformed

    private void basicAuthControlButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_basicAuthControlButtonActionPerformed
        
        if(loginTextFiled.getText().trim().isEmpty()||passwordTextField.getText().trim().isEmpty()){
        JOptionPane.showMessageDialog(this, "Login or password field are empty !","Message", JOptionPane.INFORMATION_MESSAGE);
        return;
        }
        if(this.passwordAuthentication==true)
        {
        this.basicAuthControlButton.setText("Enable");
        this.passwordAuthentication=false;
        this.basicLoginPassAuthStatus.setText("Disabled");
        }
        else
        {
        
        this.basicAuthControlButton.setText("Disable");
        this.passwordAuthentication=true;
        this.login=loginTextFiled.getText().trim();
        this.password=passwordTextField.getText().trim();
        this.basicLoginPassAuthStatus.setText("Enabled");
        }
    }//GEN-LAST:event_basicAuthControlButtonActionPerformed

    private void showSecuritySettingsInLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showSecuritySettingsInLogActionPerformed
        if(webserver!=null)
            if(webserver.isRunning())
                webserver.showSecuritySettingsInLog();
    }//GEN-LAST:event_showSecuritySettingsInLogActionPerformed

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WebServerSettings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WebServerSettings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WebServerSettings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WebServerSettings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
               
                new WebServerSettings().setVisible(true);
 
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addIPaddressInList;
    private javax.swing.JButton basicAuthControlButton;
    private javax.swing.JLabel basicLoginPassAuthStatus;
    private javax.swing.JComboBox blackWhiteListChooser;
    private javax.swing.JLabel currentBasicAuthStatusLabel;
    private javax.swing.JLabel currentIPVerificationStatusLabel;
    private javax.swing.JLabel currentServerContentLabel;
    private javax.swing.JLabel currentServerPortLabel;
    private javax.swing.JButton ipAddressesDeleteButton;
    private javax.swing.JList ipAddressesList;
    private javax.swing.JButton ipVerControlButton;
    private javax.swing.JLabel ipVerStatusLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JTextField loginTextFiled;
    private javax.swing.JPasswordField passwordTextField;
    private javax.swing.JLabel serverStatusLabel;
    private javax.swing.JButton showSecuritySettingsInLog;
    private javax.swing.JButton startServerButton;
    private javax.swing.JButton stopServerButton;
    private javax.swing.JTextField textFieldForInsertingIPAddress;
    private javax.swing.JButton webServerContent;
    // End of variables declaration//GEN-END:variables
}
